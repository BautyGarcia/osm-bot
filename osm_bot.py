#!/usr/bin/env python3
"""
OSM Bot - Automatizaci√≥n para Online Soccer Manager

Este script automatiza el login en Online Soccer Manager.
"""

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# ========== CONFIGURACI√ìN ==========
# Cambiar estos valores por tus credenciales
USERNAME = "Crocoo"  # Cambiar por tu nombre de usuario
PASSWORD = "Bauty2005!"  # Cambiar por tu contrase√±a

OSM_URL = "https://en.onlinesoccermanager.com/ChooseLeague"

def wait_for_element(driver, by, value, timeout=10, condition="presence"):
    """
    Espera hasta que aparezca un elemento en la p√°gina
    
    Args:
        driver: WebDriver instance
        by: Tipo de selector (By.ID, By.XPATH, etc.)
        value: Valor del selector
        timeout: Tiempo m√°ximo de espera en segundos (default: 10)
        condition: Tipo de condici√≥n a esperar (default: "presence")
                  - "presence": elemento presente en DOM
                  - "visible": elemento visible
                  - "clickable": elemento clickeable
    
    Returns:
        WebElement si se encuentra, None si no se encuentra
    """
    try:
        wait = WebDriverWait(driver, timeout)
        
        if condition == "presence":
            element = wait.until(EC.presence_of_element_located((by, value)))
        elif condition == "visible":
            element = wait.until(EC.visibility_of_element_located((by, value)))
        elif condition == "clickable":
            element = wait.until(EC.element_to_be_clickable((by, value)))
        else:
            print(f"‚ö†Ô∏è Condici√≥n '{condition}' no reconocida, usando 'presence'")
            element = wait.until(EC.presence_of_element_located((by, value)))
        
        return element
    except Exception as e:
        print(f"‚ùå Timeout esperando elemento {by}='{value}': {e}")
        return None

def main():
    print("üöÄ Iniciando OSM Bot...")
    
    # Configurar Chrome
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--mute-audio")  # Iniciar sin sonido
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)
    
    # Crear driver
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        # PASO 1: Entrar a la URL
        print("üåê Navegando a Online Soccer Manager...")
        driver.get(OSM_URL)
        
        # PASO 2: Esperar a que se cargue la p√°gina (buscar el bot√≥n Accept)
        print("‚è≥ Esperando a que cargue la p√°gina...")
        if not wait_for_element(driver, By.XPATH, "//span[contains(text(), 'Accept')]", timeout=15):
            print("‚ùå La p√°gina no carg√≥ correctamente")
            return
        
        # PASO 3: Apretar el bot√≥n "Accept"
        print("‚úÖ Buscando y clickeando bot√≥n 'Accept'...")
        accept_button = wait_for_element(driver, By.XPATH, "//span[contains(text(), 'Accept')]", condition="clickable")
        if accept_button:
            accept_button.click()
            print("‚úÖ Bot√≥n 'Accept' clickeado")
        else:
            print("‚ö†Ô∏è No se encontr√≥ el bot√≥n 'Accept'")
            return
        
        # PASO 4: Apretar el bot√≥n "Log in"
        print("üîë Buscando y clickeando bot√≥n 'Log in'...")
        login_button = wait_for_element(driver, By.XPATH, "//button[contains(text(), 'Log in')] | //a[contains(text(), 'Log in')] | //input[@value='Log in']", condition="clickable")
        if login_button:
            login_button.click()
            print("‚úÖ Bot√≥n 'Log in' clickeado")
        else:
            print("‚ùå Error al buscar bot√≥n 'Log in'")
            return
        
        # PASO 5: Esperar y buscar el campo de usuario
        print("üë§ Esperando campo de usuario...")
        username_field = wait_for_element(driver, By.ID, "manager-name", condition="visible")
        if username_field:
            username_field.clear()
            username_field.send_keys(USERNAME)
            print("‚úÖ Nombre de usuario ingresado")
        else:
            print("‚ùå Error al encontrar campo de usuario")
            return
        
        # PASO 6: Ingresar contrase√±a
        print("üîí Ingresando contrase√±a...")
        password_field = wait_for_element(driver, By.ID, "password", condition="visible")
        if password_field:
            password_field.clear()
            password_field.send_keys(PASSWORD)
            print("‚úÖ Contrase√±a ingresada")
        else:
            print("‚ùå Error al encontrar campo de contrase√±a")
            return
        
        # PASO 7: Apretar el bot√≥n de login
        print("üö™ Clickeando bot√≥n de login...")
        final_login_button = wait_for_element(driver, By.ID, "login", condition="clickable")
        if final_login_button:
            final_login_button.click()
            print("‚úÖ Bot√≥n de login clickeado")
        else:
            print("‚ùå Error al encontrar bot√≥n de login")
            return
        
        # Funci√≥n para ejecutar pasos 8-10 (balances, scroll, anuncios)
        def execute_balances_and_ads():
            # PASO 8: Esperar y clickear el div con id "balances"
            print("üí∞ Esperando y buscando div 'balances'...")
            balances_div = wait_for_element(driver, By.ID, "balances", timeout=15, condition="clickable")
            if balances_div:
                balances_div.click()
                print("‚úÖ Div 'balances' clickeado")
            else:
                print("‚ùå Error al encontrar div 'balances'")
                return False
            
            # PASO 9: Esperar modal store y elemento bcdeals, luego hacer scroll horizontal
            print("üõí Esperando modal store...")
            modal_store = wait_for_element(driver, By.ID, "modal-dialog-store", timeout=15, condition="visible")
            if modal_store:
                print("‚úÖ Modal store encontrado")
                print("üéØ Esperando elemento 'product-category-bcdeals'...")
                bcdeals_element = wait_for_element(driver, By.ID, "product-category-bcdeals", timeout=15, condition="presence")
                if bcdeals_element:
                    print("‚úÖ Elemento 'bcdeals' encontrado")
                    print("üì¶ Buscando contenedor scrolleable...")
                    scrollable_container = wait_for_element(driver, By.CLASS_NAME, "scrollable-products-container", timeout=10, condition="presence")
                    if scrollable_container:
                        print("‚úÖ Contenedor scrolleable encontrado, haciendo scroll a la derecha...")
                        # Hacer scroll horizontal a la derecha (3000px) en el contenedor espec√≠fico
                        driver.execute_script("arguments[0].scrollLeft += 3000;", scrollable_container)
                        print("‚úÖ Scroll a la derecha completado en contenedor de productos")
                    else:
                        print("‚ùå Error al encontrar contenedor 'scrollable-products-container'")
                        return False
                else:
                    print("‚ùå Error al encontrar elemento 'product-category-bcdeals'")
                    return False
            else:
                print("‚ùå Error al encontrar modal 'modal-dialog-store'")
                return False
            
            return True
        
        # Ejecutar pasos 8-9 por primera vez
        if not execute_balances_and_ads():
            return
        
        # PASO 10: Loop infinito para ver anuncios
        print("üì∫ Iniciando loop infinito para ver anuncios...")
        print("üîÑ Presiona Ctrl+C para detener el loop de anuncios")
        
        ad_counter = 0
        while True:
            try:
                # Primero verificar si hay mensaje de l√≠mite
                print(f"üîç Verificando l√≠mite de videos...")
                limit_message = wait_for_element(driver, By.XPATH, "//h3[contains(text(), \"Can't show video\")]", timeout=3, condition="presence")
                
                if limit_message:
                    print("‚è∞ ¬°L√≠mite de videos alcanzado!")
                    print("üìù Mensaje: 'Can't show video' detectado")
                    
                    # Buscar tambi√©n el mensaje con los minutos espec√≠ficos
                    detail_message = wait_for_element(driver, By.XPATH, "//p[contains(text(), 'You have reached the maximum of videos you can watch here')]", timeout=2, condition="presence")
                    if detail_message:
                        detail_text = detail_message.text
                        print(f"üìù Detalle: {detail_text}")
                    
                    print("‚è≥ Esperando 5 minutos antes de volver a intentar...")
                    
                    # Esperar 5 minutos (300 segundos) con countdown
                    for remaining in range(300, 0, -30):
                        minutes = remaining // 60
                        seconds = remaining % 60
                        print(f"‚è∞ Tiempo restante: {minutes}:{seconds:02d} minutos")
                        time.sleep(30)  # Esperar 30 segundos y mostrar update
                    
                    print("‚úÖ Espera completada")
                    print("üîÑ Refrescando p√°gina...")
                    driver.refresh()
                    
                    print("üîÑ Reejecutando desde paso 8...")
                    if not execute_balances_and_ads():
                        print("‚ùå Error al reejecutar pasos despu√©s del refresh")
                        return
                    
                    print("‚úÖ P√°gina refrescada, continuando con anuncios...")
                    continue
                
                # Buscar bot√≥n "Watch ad"
                print(f"üîç Buscando bot√≥n 'Watch ad' (Anuncio #{ad_counter + 1})...")
                watch_ad_button = wait_for_element(driver, By.XPATH, "//div[contains(text(), 'Watch ad')]", timeout=10, condition="clickable")
                
                if watch_ad_button:
                    print(f"üì∫ Anuncio #{ad_counter + 1} - Clickeando 'Watch ad'...")
                    watch_ad_button.click()
                    ad_counter += 1
                    
                    # Esperar a que el anuncio termine (el bot√≥n vuelva a aparecer)
                    print("‚è≥ Esperando a que termine el anuncio...")
                    
                    # Esperar un poco para que el anuncio se abra
                    time.sleep(2)
                    
                    # Esperar a que el bot√≥n "Watch ad" vuelva a estar disponible
                    print("üîÑ Esperando a que el anuncio termine y el bot√≥n vuelva a aparecer...")
                    next_ad_button = wait_for_element(driver, By.XPATH, "//div[contains(text(), 'Watch ad')]", timeout=60, condition="clickable")
                    
                    if next_ad_button:
                        print(f"‚úÖ Anuncio #{ad_counter} completado. Preparando siguiente anuncio...")
                        time.sleep(1)  # Peque√±a pausa antes del siguiente anuncio
                    else:
                        print("‚ö†Ô∏è El bot√≥n 'Watch ad' no volvi√≥ a aparecer, continuando...")
                
                else:
                    print("‚ö†Ô∏è No se encontr√≥ bot√≥n 'Watch ad', esperando...")
                    time.sleep(5)  # Esperar 5 segundos antes de intentar de nuevo
                    
            except KeyboardInterrupt:
                print(f"\nüõë Loop de anuncios detenido por el usuario")
                print(f"üìä Total de anuncios vistos: {ad_counter}")
                break
            except Exception as e:
                print(f"‚ùå Error en loop de anuncios: {e}")
                print("üîÑ Continuando con el siguiente intento...")
                time.sleep(3)
        
        print("üéâ ¬°Todos los pasos completados!")
        print("üîÑ El navegador se mantendr√° abierto...")
        
        # Mantener el navegador abierto
        input("Presiona Enter para cerrar el navegador...")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
    
    finally:
        print("üîÑ Cerrando navegador...")
        driver.quit()
        print("üëã Bot terminado")

if __name__ == "__main__":
    # Verificar que las credenciales est√©n configuradas
    if USERNAME == "tu_usuario_aqui" or PASSWORD == "tu_contrase√±a_aqui":
        print("‚ö†Ô∏è  ADVERTENCIA: Debes cambiar USERNAME y PASSWORD en el script")
        print("üìù Edita las l√≠neas 14-15 con tus credenciales reales")
        print()
        
        # Preguntar si quiere continuar para hacer pruebas
        respuesta = input("¬øQuieres continuar para hacer pruebas? (y/N): ")
        if respuesta.lower() != 'y':
            print("üëã Configurar credenciales y ejecutar nuevamente")
            exit()
    
    main() 